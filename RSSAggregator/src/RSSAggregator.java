import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Seunghyun NAM
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //file opening tag
        out.println("<?xml version = '1.0' encoding='UTF-8' ?>");

        //Setting up the table and giving the column headers.
        out.println("<p>Table of the latest news and headlines.</p>");
        out.println("<table border=\"1\" style=\"width:100%\">");
        out.println("<tr>");
        out.println("<td><strong>Date</strong></td>");
        out.println("<td><strong>Source</strong></td>");
        out.println("<td><strong>News</strong></td>");
        out.println("</tr>");

        //Printing <channel>title as the page title
        XMLTree title = null;
        String header = "";
        if (getChildElement(channel, "title") > -1) {
            title = channel.child(getChildElement(channel, "title"));
            header = title.child(0).label();
        }

        out.println("<title>" + header + "</title>");

        //Printing out additional opening tags.
        out.println("</head>");
        out.println("<body>");

        //Calling the content in the link tag
        XMLTree link = channel.child(getChildElement(channel, "link"));
        String headerLink = link.child(0).label();
        out.println("<h1><a href = " + headerLink + ">" + header + "</a></h1>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Finishing the table tag.
        out.println("</table>");
        //Finishing the body tag.
        out.println("</body>");
        //Finishing the html tag.
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int indexNumber = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {
                indexNumber = i;
                i = xml.numberOfChildren();
            }

        }

        return indexNumber;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        int count = 0;
        int dateSave = -1;
        int sourceSave = -1;
        int titleSave = -1;
        int linkSave = -1;
        int descriptSave = -1;
        while (item.numberOfChildren() > count) {
            if (item.child(count).label().equals("pubDate")) {
                dateSave = count;
            }
            if (item.child(count).label().equals("source")) {
                sourceSave = count;
            }
            if (item.child(count).label().equals("title")) {
                titleSave = count;
            }
            if (item.child(count).label().equals("link")) {
                linkSave = count;
            }
            if (item.child(count).label().equals("description")) {
                descriptSave = count;
            }
            count++;
        }

        //Printing the date if available
        out.println("<tr>");
        out.print("<td>");
        if (dateSave > -1) {
            out.print(item.child(dateSave).child(0).label());
        } else {
            out.print("No date available");
        }
        out.println("</td>");

        //Printing the source if available
        out.print("<td>");
        if (sourceSave > -1 && item.child(sourceSave).hasAttribute("url")) {
            out.print("<a href=\""
                    + item.child(sourceSave).attributeValue("url") + "\">");

            if (sourceSave > -1) {
                out.print(item.child(sourceSave).child(0).label());
            }

            out.print("</a>");
        } else {
            out.print("No source available");
        }
        out.println("</td>");

        //Printing the title if available
        out.println("<td>");
        if (linkSave > -1) {
            out.print("<a href=\"" + item.child(linkSave).child(0).label()
                    + "\">");

            if (titleSave > -1) {
                if (item.child(titleSave).numberOfChildren() > 0) {
                    out.print(item.child(titleSave).child(0).label());
                } else {
                    out.println(item.child(descriptSave).child(0).label());
                }
            } else {
                out.println(item.child(descriptSave).child(0).label());
            }
            //If title doesn't exist, it checks for description and uses as
            //the title

            out.print("</a>");
        } else {
            out.print("No title available");
        }
        out.println("</td>");
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree title = new XMLTree1(url);

        String rootLabel = title.label();
        String verValue = "";
        boolean b = title.hasAttribute("version");

        if (b) {
            verValue = title.attributeValue("version");
        }

        //Checking the version? of RSS
        if (title.label().equals("rss") && title.hasAttribute("version")
                && title.attributeValue("version").equals("2.0")) {
            out.println("Not a proper RSS Feed.");
            out.println("Enter a new URL of RSS Feed: ");

        }

        //Setting the output file's name & creating codes in the file
        SimpleWriter outfile = new SimpleWriter1L(file);
        XMLTree channel = title.child(0);
        outputHeader(channel, outfile);

        //Sending the content of the table via processItem method
        int i = 0;

        while (i < channel.numberOfChildren()) {
            if (channel.child(i).label().contentEquals("item")) {
                processItem(channel.child(i), outfile);
            }
            i++;
        }

        //Closing the tag of the table for the html document with outputFooter
        //method.
        outputFooter(outfile);

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Enter Feed List here: ");
        String feedList = in.nextLine();
        XMLTree source = new XMLTree1(feedList);
        //source.display(); //Delete this later if pop-up is unnecessary
        //Asks for input for feed list
        //ex.

        out.println("Enter the name of output file(in name.html format): ");
        String file = "";
        file = in.nextLine();
        SimpleWriter outfile = new SimpleWriter1L(file);
        //Asks for input for output file name

        outfile.println("<html>");
        outfile.println("<head>");
        outfile.println("<title>");

        if (source.hasAttribute("title")) {
            outfile.println(source.attributeValue("title"));
        } else {
            outfile.println("");
        }

        outfile.println("</title>");
        outfile.println("<h2>");
        if (source.hasAttribute("title")) {
            outfile.println(source.attributeValue("title"));
        } else {
            outfile.println("");
        }

        outfile.print("</h2>");
        outfile.println();
        //Creating the header of the page in the title tag of XMLTree

        int i = 0;
        while (i < source.numberOfChildren()) {
            SimpleWriter output = new SimpleWriter1L(
                    source.child(i).attributeValue("file"));
            processFeed(source.child(i).attributeValue("url"),
                    source.child(i).attributeValue("file"), output);
            i++;
        }
        //Writing to a external text file, and process items via processFeed

        outfile.println("<ul>");

        int j = 0;
        while (j < source.numberOfChildren()) {
            outfile.println("<li>");
            if (source.child(j).hasAttribute("file")) {
                outfile.println("<a href=\""
                        + source.child(j).attributeValue("file") + "\">");
            }

            if (source.child(j).hasAttribute("name")) {
                outfile.println(source.child(j).attributeValue("name"));
            }

            outfile.println("</a>");
            outfile.println("</li>");
            j++;

        }
        outfile.println("</ul>");
        outfile.println("</body>");

        //Closing the tags of html file.
        outputFooter(outfile);
        //And file
        outfile.close();
        /*
         * Close I/O streams.
         */
        in.close();
        out.close();

    }

}
/**
 * I had to change some parts of the source codes that looks weird because
 * otherwise Eclipse didn't allow me to run the program when if I don't, so I
 * fixed those during office hours with TA. Some sytax might look not right, but
 * if I don't do that way, it doesn't work.
 *
 */
