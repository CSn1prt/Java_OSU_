import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Seunghyun NAM
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //file opening tag
        out.println("<?xml version = '1.0' encoding='UTF-8' ?>");

        //Setting up the table and giving the column headers.
        out.println("<p>Table of the latest news and headlines.</p>");
        out.println("<table border=\"1\" style=\"width:100%\">");
        out.println("<tr>");
        out.println("<td><strong>Date</strong></td>");
        out.println("<td><strong>Source</strong></td>");
        out.println("<td><strong>News</strong></td>");
        out.println("</tr>");

        //Printing <channel>title as the page title
        XMLTree title = channel.child(getChildElement(channel, "title"));
        String header = title.child(0).label();
        out.println("<title>" + header + "</title>");

        //Printing out additional opening tags.
        out.println("</head>");
        out.println("<body>");

        //Calling the content in the link tag
        XMLTree link = channel.child(getChildElement(channel, "link"));
        String headerLink = link.child(0).label();
        out.println("<h1><a href = " + headerLink + ">" + header + "</a></h1>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Finishing the table tag.
        out.println("</table>");
        //Finishing the body tag.
        out.println("</body>");
        //Finishing the html tag.
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int indexNumber = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {
                indexNumber = i;
                i = xml.numberOfChildren();
            }

        }

        return indexNumber;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * //Starts the row of table out.println("<tr>");
         *
         * //printing the publication date if present int k =
         * getChildElement(item, "pubDate"); if (k == -1) {
         * out.println("<td>No date available</td>");
         *
         * } else { String pubDateContent = item.child(k).child(0).label();
         * out.println("<td>" + pubDateContent + "</td>"); }
         *
         * //printing the source if present k = getChildElement(item, "source");
         * if (k == -1) { out.println("<td>No source available</td>"); } else {
         * String sourceContent = item.child(k).child(0).label(); String url =
         * ""; if (item.child(k).child(0).hasAttribute("url")) { url =
         * item.child(k).child(0).attributeValue("url");
         * out.println("<td><a href = " + url + ">" + sourceContent +
         * "</a></td>"); } else { out.println("<td>" + sourceContent + "</td>");
         * }
         *
         * }
         *
         * //printing the title if present k = getChildElement(item, "title");
         * if (k == -1) { k = getChildElement(item, "description"); String
         * descriptionContent = item.child(k).child(0).label(); k =
         * getChildElement(item, "link");
         *
         * if (k == -1) {
         *
         * out.println("<td>" + descriptionContent + "</td>"); } else { String
         * url = item.child(k).child(0).label(); out.println("<td><a href = " +
         * url + ">" + descriptionContent + "</a></td>"); }
         *
         * } else { String titleContent = item.child(k).child(0).label(); k =
         * getChildElement(item, "link"); if (k == -1) { out.println("<td>" +
         * titleContent + "</td>"); } else { String url =
         * item.child(k).child(0).label(); out.println("<td><a href = " + url +
         * ">" + titleContent + "</a></td>"); } } //End of the table row.
         * out.println("</tr>");
         */
        int count = 0;
        int dateSave = -1;
        int sourceSave = -1;
        int titleSave = -1;
        int linkSave = -1;
        while (item.numberOfChildren() > count) {
            if (item.child(count).label().equals("pubDate")) {
                dateSave = count;
            }
            if (item.child(count).label().equals("source")) {
                sourceSave = count;
            }
            if (item.child(count).label().equals("title")) {
                titleSave = count;
            }
            if (item.child(count).label().equals("link")) {
                linkSave = count;
            }
            count++;
        }

        //Printing the date if available
        out.println("<tr>");
        out.print("<td>");
        if (dateSave > -1) {
            out.print(item.child(dateSave).child(0).label());
        } else {
            out.print("No date available");
        }
        out.println("</td>");

        //Printing the source if available
        out.print("<td>");
        if (sourceSave > -1 && item.child(sourceSave).hasAttribute("url")) {
            out.print("<a href=\""
                    + item.child(sourceSave).attributeValue("url") + "\">");

            if (sourceSave > -1) {
                out.print(item.child(sourceSave).child(0).label());
            }

            out.print("</a>");
        } else {
            out.print("No source available");
        }
        out.println("</td>");

        //Printing the title if available
        out.println("<td>");
        if (linkSave > -1) {
            out.print("<a href=\"" + item.child(linkSave).child(0).label()
                    + "\">");

            if (titleSave > -1) {
                out.print(item.child(titleSave).child(0).label());
            }

            out.print("</a>");
        } else {
            out.print("No title available");
        }
        out.println("</td>");
        out.println("</tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * TODO: fill in body
         */
        String root = "", value = "", url = "";

        out.println("Enter here the URL of an RSS 2.0 feed: ");
        url = in.nextLine();
        XMLTree xml = new XMLTree1(url);

        root = xml.label();
        boolean b = xml.hasAttribute("version");
        if (b) {
            value = xml.attributeValue("version");
        }

        //checking if a valid xml page is provided
        while (!xml.label().equals("rss")
                || !xml.attributeValue("version").equals("2.0")) {
            out.print("XML is not in a proper format.");

            out.print("Enter the URL of an RSS 2.0 news feed: ");
            url = in.nextLine();
        }

        //Getting the name of an output file
        out.println("Enter the name of output file: ");
        String file;
        file = in.nextLine();
        SimpleWriter outfile = new SimpleWriter1L(file);
        //From Office hours

        //Printing the header to the file and opening lines
        XMLTree channel = xml.child(0);
        outputHeader(channel, outfile);

        //Outputting a paragraph in the file
        XMLTree description = channel
                .child(getChildElement(channel, "description"));
        String descriptionContent = description.child(0).label();
        outfile.println("<p>" + descriptionContent + "</p>");

        //Outputting the table to the file.
        int n = getChildElement(channel, "item");
        if (n != 1) {
            processItem(channel.child(n), outfile);
            n++;
            while (n < channel.numberOfChildren()) {
                if (channel.child(n).label().contentEquals("item")) {
                    processItem(channel.child(n), outfile);

                }
                n++;
            }
        }

        //Outputting closing tags for html document
        outputFooter(outfile);
        outfile.close();
        in.close();
        out.close();
    }

}
/**
 * I had to change some parts of the source codes that looks weird because
 * otherwise Eclipse didn't allow me to run the program when if I don't, so I
 * fixed those during office hours with TA. Some sytax might look not right, but
 * if I don't do that way, it doesn't work.
 *
 */
